{"version":3,"sources":["ng://ngx-toast-it/lib/toast.model.ts","ng://ngx-toast-it/lib/toast-it.service.ts","ng://ngx-toast-it/lib/toast-container/toast-container.component.ts","ng://ngx-toast-it/lib/toast/toast.component.ts","ng://ngx-toast-it/lib/general/component-injector.service.ts","ng://ngx-toast-it/lib/progress-bar/progress-bar.component.ts","ng://ngx-toast-it/lib/toast-it.module.ts"],"names":["topLeft","topRight","bottomLeft","bottomRight","config","this","position","ToastPosition","groupingThreshold","progressBarEnabled","Object","assign","Toast","toast","subheading","timeout","ToastItService","activeToasts$","Subject","activeConfig$","prototype","setConfig","next","ToastConfig","createToast","newToast","deleteToast","id","resetToasts","Injectable","args","providedIn","ToastContainerComponent","toastService","BehaviorSubject","toastCountStream$","toastCount$","pipe","filter","count","ngOnInit","_this","subscribe","insertNewToast","toasts","handleIncomingToast","destroy","index","newValue","getValue","splice","push","toasts$","from","take","toArray","length","setTimeout","Component","selector","template","animations","trigger","state","style","opacity","transition","animate","ToastComponent","destroyEmitter","EventEmitter","startTimer","getIconByType","type","faCheckCircle","faInfoCircle","faExclamationTriangle","faExclamationCircle","Input","Output","ComponentInjectorService","componentFactoryResolver","applicationRef","injector","injectComponent","component","params","componentRef","createComponent","instance","attachView","hostView","domElem","rootNodes","document","body","appendChild","resolveComponentFactory","create","ComponentFactoryResolver","ApplicationRef","Injector","ProgressBarComponent","progress","calculateDuration","duration","amountOfMarblesUntilFinished","amountOfPercentageOfEachMarble","interval","ToastItModule","componentInjectorService","NgModule","declarations","entryComponents","providers","imports","CommonModule","BrowserAnimationsModule","FontAwesomeModule","success","warning","error","info"],"mappings":"yvCAQEA,QAAU,WACVC,SAAW,YACXC,WAAa,cACbC,YAAc,kBAQd,SAAYC,QAAA,IAAAA,IAAAA,EAAA,IAJZC,KAAAC,SAAaC,EAAcN,SAC3BI,KAAAG,kBAAsB,EACtBH,KAAAI,oBAAuB,EAGrBC,OAAOC,OAAON,KAAMD,IAIxB,IAAAQ,EAQE,SAAYC,GAJZR,KAAAS,WAAe,GAEfT,KAAAU,QAAY,EAGVL,OAAOC,OAAON,KAAMQ,ICjCxB,IAAAG,EAAA,WAaE,SAAAA,IAHOX,KAAAY,cAAgB,IAAIC,EAAAA,QACpBb,KAAAc,cAAgB,IAAID,EAAAA,eAKpBF,EAAAI,UAAAC,UAAP,SAAiBjB,GACfC,KAAKc,cAAcG,KAAK,IAAIC,EAAYnB,KAGnCY,EAAAI,UAAAI,YAAP,SAAmBX,OACXY,EAAW,IAAIb,EAAMC,GAC3BR,KAAKY,cAAcK,KAAKG,IAGnBT,EAAAI,UAAAM,YAAP,SAAmBC,KAGZX,EAAAI,UAAAQ,YAAP,iCAvBDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJANd,GCAA,IAAAC,EAAA,WA2BE,SAAAA,EAAoBC,GAAA5B,KAAA4B,aAAAA,EAPZ5B,KAAAY,cAAgB,IAAIiB,EAAAA,gBAAyB,IAC7C7B,KAAA8B,kBAAoB,IAAID,EAAAA,gBAAwB,GAEjD7B,KAAAD,OAAS,IAAImB,EAEblB,KAAA+B,YAAc/B,KAAK8B,kBAAkBE,KAAKC,EAAAA,OAAM,SAACC,GAAS,OAAAA,EAAQ,KAiC3E,OA5BEP,EAAAZ,UAAAoB,SAAA,WAAA,IAAAC,EAAApC,KACEA,KAAK4B,aAAad,cAAcuB,UAAS,SAACtC,GAAU,OAAAqC,EAAKpB,UAAUjB,KACnEC,KAAK4B,aAAahB,cAAcyB,UAAS,SAAC7B,GAAS,OAAA4B,EAAKE,eAAe9B,KACvER,KAAKY,cAAcyB,UAAS,SAACE,GAAU,OAAAH,EAAKI,oBAAoBD,MAG3DZ,EAAAZ,UAAA0B,QAAP,SAAeC,OACPC,EAAW3C,KAAKY,cAAcgC,WACpCD,EAASE,OAAOH,EAAO,GACvB1C,KAAKY,cAAcK,KAAK0B,IAGlBhB,EAAAZ,UAAAuB,eAAR,SAAuB9B,OACfmC,EAAW3C,KAAKY,cAAcgC,WACpCD,EAASG,KAAKtC,GACdR,KAAKY,cAAcK,KAAK0B,IAGlBhB,EAAAZ,UAAAyB,oBAAR,SAA4BD,GACnB,IAAApC,EAAAH,KAAAD,OAAAI,kBACPH,KAAK+C,QAAUC,EAAAA,KAAKT,GAAQP,KAAKiB,EAAAA,KAAK9C,GAAoB+C,EAAAA,WAC1DlD,KAAK8B,kBAAkBb,KAAKsB,EAAOY,OAAShD,IAGtCwB,EAAAZ,UAAAC,UAAR,SAAkBjB,GAAlB,IAAAqC,EAAApC,KACEoD,WAAU,WAAO,OAAAhB,EAAKrC,OAASA,GAAQ,wBAhD1CsD,EAAAA,UAAS5B,KAAA,CAAC,CACT6B,SAAU,sBACVC,SAAA,wbAEAC,WAAY,CACVC,EAAAA,QAAQ,YAAa,CACnBC,EAAAA,MAAM,OAAQC,EAAAA,MAAM,CAACC,QAAS,KAC9BC,EAAAA,WAAW,aAAcC,EAAAA,QAAQ,8hCAb/BnD,KAyDRgB,EA1DA,OCUAoC,EAAA,WAaE,SAAAA,IAAA,IAAA3B,EAAApC,KANOA,KAAA2D,MAAQ,GAIE3D,KAAAgE,eAAiB,IAAIC,EAAAA,aAsB/BjE,KAAAyC,QAAO,WAAS,OAAAL,EAAK4B,eAAe/C,QAS7C,OA1BE8C,EAAAhD,UAAAoB,SAAA,WACEnC,KAAKkE,cAGAH,EAAAhD,UAAAoD,cAAP,WACE,OAAQnE,KAAKQ,MAAM4D,MACjB,IAAK,iBACH,OAAOC,EAAAA,cACT,IAAK,cACH,OAAOC,EAAAA,aACT,IAAK,iBACH,OAAOC,EAAAA,sBACT,IAAK,eACH,OAAOC,EAAAA,sBAMLT,EAAAhD,UAAAmD,WAAR,WAAA,IAAA9B,EAAApC,KAC6B,IAAvBA,KAAKQ,MAAME,SAIf0C,WAAU,WAAO,OAAAhB,EAAKK,WA1CG,IA0CQzC,KAAKQ,MAAME,8BAxC/C2C,EAAAA,UAAS5B,KAAA,CAAC,CACT6B,SAAU,YACVC,SAAA,+nFAMCkB,EAAAA,sBACAA,EAAAA,0BACAA,EAAAA,8BACAC,EAAAA,UA+BHX,EA1CA,GCVA,IAAAY,EAAA,WAOE,SAAAA,EAAoBC,EACAC,EACAC,GAFA9E,KAAA4E,yBAAAA,EACA5E,KAAA6E,eAAAA,EACA7E,KAAA8E,SAAAA,SAIbH,EAAA5D,UAAAgE,gBAAP,SAAuBC,EAAWC,QAAA,IAAAA,IAAAA,EAAA,QAC1BC,EAAelF,KAAKmF,gBAAgBH,GAE1C3E,OAAOC,OAAO4E,EAAaE,SAAUH,GAErCjF,KAAK6E,eAAeQ,WAAWH,EAAaI,cAEtCC,EAAWL,EAAqB,SAA0BM,UAAU,GAE1EC,SAASC,KAAKC,YAAYJ,IAGpBZ,EAAA5D,UAAAoE,gBAAR,SAAwBH,GACtB,OAAOhF,KAAK4E,yBACTgB,wBAAwBZ,GACxBa,OAAO7F,KAAK8E,+BA1BlBtD,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAHNoE,EAAAA,gCAAgDC,EAAAA,sBAAVC,EAAAA,+MAA9C,OCOAC,EAAA,WAUE,SAAAA,IAHSjG,KAAAkG,SAAmB,EAsB9B,OAhBED,EAAAlF,UAAAoB,SAAA,WACEnC,KAAKmG,qBAGCF,EAAAlF,UAAAoF,kBAAR,WAAA,IAAA/D,EAAApC,KACE,GAAKA,KAAKoG,SAAV,KAIMC,EAzBmB,IAyBYrG,KAAKoG,SAxBzB,GAyBXE,EAAiC,IAAMD,EAE7CE,EAAAA,SA3BiB,IA4BdvE,KAAKiB,EAAAA,KAAKoD,IACVhE,UAAS,WAAO,OAAAD,EAAK8D,UAAYI,0BA3BvCjD,EAAAA,UAAS5B,KAAA,CAAC,CACT6B,SAAU,mBACVC,SAAA,yPAKCkB,EAAAA,wBACAA,EAAAA,SAqBHwB,EA7BA,GCPA,IAAAO,EAAA,WA4BE,SAAAA,EAAYC,GACVA,EAAyB1B,gBAAgBpD,GAE7C,2BApBC+E,EAAAA,SAAQjF,KAAA,CAAC,CACRkF,aAAc,CACZ5C,EACApC,EACAsE,GAEFW,gBAAiB,CACfjF,GAEFkF,UAAW,CAAClG,GACZmG,QAAS,CACPC,EAAAA,aACAC,EAAAA,wBACAC,EAAAA,gEAlBItC,KAyBR6B,EA/BA,iGNCEU,QAAU,iBACVC,QAAU,iBACVC,MAAQ,eACRC,KAAO","sourcesContent":["export enum ToastType {\n  success = 'toast--success',\n  warning = 'toast--warning',\n  error = 'toast--error',\n  info = 'toast--info'\n}\n\nexport enum ToastPosition {\n  topLeft = 'top-left',\n  topRight = 'top-right',\n  bottomLeft = 'bottom-left',\n  bottomRight = 'bottom-right'\n}\n\nexport class ToastConfig {\n  position ? = ToastPosition.topRight;\n  groupingThreshold ? = 5;\n  progressBarEnabled ? = true;\n\n  constructor(config = {}) {\n    Object.assign(this, config);\n  }\n}\n\nexport class Toast {\n\n  type: ToastType;\n  heading: string;\n  subheading ? = '';\n  message: string;\n  timeout ? = 5;\n\n  constructor(toast) {\n    Object.assign(this, toast);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {Toast, ToastConfig} from './toast.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastItService {\n\n  public activeToasts$ = new Subject<Toast>();\n  public activeConfig$ = new Subject<ToastConfig>();\n\n  constructor() {\n  }\n\n  public setConfig(config: ToastConfig) {\n    this.activeConfig$.next(new ToastConfig(config));\n  }\n\n  public createToast(toast: Toast) {\n    const newToast = new Toast(toast);\n    this.activeToasts$.next(newToast);\n  }\n\n  public deleteToast(id: number) {\n  }\n\n  public resetToasts() {\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {ToastItService} from '../toast-it.service';\nimport {BehaviorSubject, from, Observable} from 'rxjs';\nimport {Toast, ToastConfig} from '../toast.model';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {filter, take, toArray} from 'rxjs/operators';\n\n@Component({\n  selector: 'lib-toast-container',\n  templateUrl: './toast-container.component.html',\n  styleUrls: ['./toast-container.component.scss'],\n  animations: [\n    trigger('fadeInOut', [\n      state('void', style({opacity: 0})),\n      transition('void <=> *', animate(300)),\n    ]),\n  ]\n})\nexport class ToastContainerComponent implements OnInit {\n\n  private activeToasts$ = new BehaviorSubject<Toast[]>([]);\n  private toastCountStream$ = new BehaviorSubject<number>(0);\n\n  public config = new ToastConfig();\n  public toasts$: Observable<Toast[]>;\n  public toastCount$ = this.toastCountStream$.pipe(filter(count => count > 0));\n\n  constructor(private toastService: ToastItService) {\n  }\n\n  ngOnInit() {\n    this.toastService.activeConfig$.subscribe(config => this.setConfig(config));\n    this.toastService.activeToasts$.subscribe(toast => this.insertNewToast(toast));\n    this.activeToasts$.subscribe(toasts => this.handleIncomingToast(toasts));\n  }\n\n  public destroy(index) {\n    const newValue = this.activeToasts$.getValue();\n    newValue.splice(index, 1);\n    this.activeToasts$.next(newValue);\n  }\n\n  private insertNewToast(toast) {\n    const newValue = this.activeToasts$.getValue();\n    newValue.push(toast);\n    this.activeToasts$.next(newValue);\n  }\n\n  private handleIncomingToast(toasts: Toast[]) {\n    const {groupingThreshold} = this.config;\n    this.toasts$ = from(toasts).pipe(take(groupingThreshold), toArray());\n    this.toastCountStream$.next(toasts.length - groupingThreshold);\n  }\n\n  private setConfig(config: ToastConfig) {\n    setTimeout(() => this.config = config, 0);\n  }\n\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Toast, ToastConfig} from '../toast.model';\nimport {faCheckCircle} from '@fortawesome/free-solid-svg-icons/faCheckCircle';\nimport {faExclamationCircle} from '@fortawesome/free-solid-svg-icons/faExclamationCircle';\nimport {faExclamationTriangle} from '@fortawesome/free-solid-svg-icons/faExclamationTriangle';\nimport {faInfoCircle} from '@fortawesome/free-solid-svg-icons/faInfoCircle';\n\n\nconst FACTOR_SECONDS_TO_MS = 1000;\n\n@Component({\n  selector: 'lib-toast',\n  templateUrl: './toast.component.html',\n  styleUrls: ['./toast.component.scss']\n})\nexport class ToastComponent implements OnInit {\n\n  public style = {};\n  @Input() public toast: Toast;\n  @Input() public config: ToastConfig;\n  @Input() public toastCount: number;\n  @Output() public destroyEmitter = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.startTimer();\n  }\n\n  public getIconByType() {\n    switch (this.toast.type) {\n      case 'toast--success':\n        return faCheckCircle;\n      case 'toast--info':\n        return faInfoCircle;\n      case 'toast--warning':\n        return faExclamationTriangle;\n      case 'toast--error':\n        return faExclamationCircle;\n    }\n  }\n\n  public destroy = () => this.destroyEmitter.next();\n\n  private startTimer() {\n    if (this.toast.timeout === 0) {\n      return;\n    }\n\n    setTimeout(() => this.destroy(), this.toast.timeout * FACTOR_SECONDS_TO_MS);\n  }\n}\n","import {ComponentFactoryResolver, Injectable, Injector, ApplicationRef, EmbeddedViewRef} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentInjectorService {\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver,\n              private applicationRef: ApplicationRef,\n              private injector: Injector) {\n  }\n\n\n  public injectComponent(component, params = {}) {\n    const componentRef = this.createComponent(component);\n\n    Object.assign(componentRef.instance, params);\n\n    this.applicationRef.attachView(componentRef.hostView);\n\n    const domElem = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n    document.body.appendChild(domElem);\n  }\n\n  private createComponent(component) {\n    return this.componentFactoryResolver\n      .resolveComponentFactory(component)\n      .create(this.injector);\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {interval} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nconst FACTOR_SECONDS_TO_MS = 1000;\nconst REFRESH_RATE = 30; // ~33hz\n\n@Component({\n  selector: 'lib-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss']\n})\nexport class ProgressBarComponent implements OnInit {\n\n  @Input() progress: number = 0;\n  @Input() duration: number;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.calculateDuration();\n  }\n\n  private calculateDuration() {\n    if (!this.duration) {\n      return;\n    }\n\n    const amountOfMarblesUntilFinished = this.duration * FACTOR_SECONDS_TO_MS / REFRESH_RATE;\n    const amountOfPercentageOfEachMarble = 100 / amountOfMarblesUntilFinished;\n\n    interval(REFRESH_RATE)\n      .pipe(take(amountOfMarblesUntilFinished))\n      .subscribe(() => this.progress += amountOfPercentageOfEachMarble);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ToastItService} from './toast-it.service';\nimport {ToastContainerComponent} from './toast-container/toast-container.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {ToastComponent} from './toast/toast.component';\nimport {ComponentInjectorService} from './general/component-injector.service';\nimport {FontAwesomeModule} from '@fortawesome/angular-fontawesome';\nimport { ProgressBarComponent } from './progress-bar/progress-bar.component';\n\n\n@NgModule({\n  declarations: [\n    ToastComponent,\n    ToastContainerComponent,\n    ProgressBarComponent\n  ],\n  entryComponents: [\n    ToastContainerComponent\n  ],\n  providers: [ToastItService],\n  imports: [\n    CommonModule,\n    BrowserAnimationsModule,\n    FontAwesomeModule\n  ]\n})\nexport class ToastItModule {\n  constructor(componentInjectorService: ComponentInjectorService) {\n    componentInjectorService.injectComponent(ToastContainerComponent);\n  }\n}\n\n\n\n"]}